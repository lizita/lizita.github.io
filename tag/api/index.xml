<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>API | Liz McConnell</title>
    <link>/tag/api/</link>
      <atom:link href="/tag/api/index.xml" rel="self" type="application/rss+xml" />
    <description>API</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Liz McConnell © 2020</copyright><lastBuildDate>Wed, 01 Jul 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon_hu06d963f22cc5d003786a3f474238bf81_14484_512x512_fill_lanczos_center_2.png</url>
      <title>API</title>
      <link>/tag/api/</link>
    </image>
    
    <item>
      <title>Accessing Historical Weather Data with Dark Sky API</title>
      <link>/post/weather/</link>
      <pubDate>Wed, 01 Jul 2020 00:00:00 +0000</pubDate>
      <guid>/post/weather/</guid>
      <description>


&lt;div id=&#34;importing-past-weather-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Importing Past Weather Data&lt;/h2&gt;
&lt;p&gt;In my IoT class last year we used a website called &lt;a href=&#34;https://darksky.net/&#34;&gt;Dark Sky&lt;/a&gt; to get current weather conditions. I’ve been thinking about this recently, since I would like to see if I can match up weather conditions to the changes in the depth to water of wells at a site. I was inspired to look into this based on a talk from Jonathan Kennel from the Univesity of Guelph ( &lt;em&gt;Happy Canada Day!&lt;/em&gt; ) and several conversations with my advisor.&lt;/p&gt;
&lt;p&gt;I’ll walk through how I imported the data to R.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Dark Sky is a great resource, however, when I went to re-visit the website I found that they have joined Apple. This means they are no longer creating new accounts. Luckily I already had one from my class last fall. The API is still supported through at least the end of 2021. Later I’ll mention some ways that you could get similar (maybe better) data through other channels.&lt;/p&gt;
&lt;p&gt;The API allows up to 1000 calls per day for free. Using the &lt;em&gt;Time Machine&lt;/em&gt; you can request data from a certain date and location. I focused on hourly data, though it’s probably finer resolution than I need.&lt;/p&gt;
&lt;p&gt;“The &lt;code&gt;hourly&lt;/code&gt; data block will contain data points starting at midnight (local time) of the day requested, and continuing until midnight (local time) of the following day.”&lt;/p&gt;
&lt;p&gt;The docs include a sample API call, which includes your key, the location, and the date requested.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;GET https://api.darksky.net/forecast/0123456789abcdef9876543210fedcba/42.3601,-71.0589,255657600?exclude=currently,flags&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;A quick visit to my best friend stack overflow provided &lt;a href=&#34;https://stackoverflow.com/questions/46069322/r-api-call-for-json-data-and-converting-to-dataframe&#34;&gt;a little more clarity&lt;/a&gt; about how to use the API in R. The date is in UNIX format. I wanted to start at January 1, 2000, so I used a handy &lt;a href=&#34;https://www.unixtimestamp.com/&#34;&gt;UNIX converter&lt;/a&gt; to find my desired date number, 946684800. I replaced the url and now I’m ready to call the API.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#GET the url 
req &amp;lt;- httr::GET(&amp;quot;https://api.darksky.net/forecast/{key}/30.012188,-94.024525,946684800?exclude=currently,flags&amp;quot;)
req$status_code 
# should be 200 if it worked. If you get 400, something has gone wrong.

# extract req$content 
cont &amp;lt;- req$content

#Convert to char
char &amp;lt;- rawToChar(req$content)

#Convert to df 
df &amp;lt;- jsonlite::fromJSON(char)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It worked! I removed my private API key, so you’ll have to take my word for it. But now I have a new problem - the call only works for one day at a time. I want a lot of days, so I decided to write a loop.&lt;/p&gt;
&lt;p&gt;One thing I couldn’t get to work was changing the date inside the string for the API url. I posted in the R for Data Science Slack, and a few minutes later I learned a handy new trick - you can put a variable inside a string by just inserting it with quotes around the variable. Something like this:
&lt;code&gt;&amp;quot;https://api.darksky.net/forecast/{key}/30.012188,-94.024525,&amp;quot;,day,&amp;quot;?exclude=currently,flags&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Great! I ran the loop and it worked, kinda. It errored out after the first run because rbind could not combine two data frames with different numbers of columns. After looking at the next few days to see which columns were off I saw that it went from 15 to 16 to 17, then back down. Very annoying! They must have added some new info for some days, but this made the data inconsistent so I had to add a select function to the loop. I selected for the 15 columns that were consistent across all days and ran it again. Success!&lt;/p&gt;
&lt;p&gt;Here’s the code I ended up with:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)

#initialize all_hours so there&amp;#39;s something to rbind to
df &amp;lt;- jsonlite::fromJSON(paste0(&amp;quot;https://api.darksky.net/forecast/{key}/30.012188,-94.024525,946684800?exclude=currently,flags&amp;quot;))
all_hours &amp;lt;- df$hourly$data

# make a vector of unix dates I want (minus the first one, which I already put in all_hours)
unix_day &amp;lt;- seq(946771200, 1033084800, by=86400) 

for (day in unix_day){
  
df &amp;lt;- jsonlite::fromJSON(paste0(&amp;quot;https://api.darksky.net/forecast/{key}/30.012188,-94.024525,&amp;quot;,
day,
&amp;quot;?exclude=currently,flags&amp;quot;))

hourly &amp;lt;- select(df$hourly$data, c(cols))
                 
all_hours &amp;lt;- rbind(hourly, all_hours)}

#convert unix time to date
all_hours$time &amp;lt;- as.POSIXct(all_hours$time, origin=&amp;quot;1970-01-01&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;it-will-take-me-a-few-days-of-using-my-1000-free-api-calls-to-cover-the-period-im-interested-in-but-overall-it-was-really-easy.&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;It will take me a few days of using my 1000 free API calls to cover the period I’m interested in, but overall it was really easy.&lt;/h2&gt;
&lt;/div&gt;
&lt;div id=&#34;other-weather-options&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Other Weather Options&lt;/h2&gt;
&lt;p&gt;Clearly getting historical weather data (hindcasting) for a certain location can be really useful, but since Dark Sky is no longer creating accounts it’s not a very practical resource.&lt;/p&gt;
&lt;p&gt;The helpful commenters on the R for Data Science Slack also suggested using &lt;a href=&#34;https://www.ncdc.noaa.gov/data-access/land-based-station-data&#34;&gt;NOAA&lt;/a&gt; to get the data. This is probably a more robust dataset anyway, but the downside is that they don’t have the option to use lat/long as a location - you have to pick from one of their existing stations. In my case there wasn’t one near the field site I was interested in, but they’re spread out across the country so I bet it will be a great source for a lot of people. There’s a good tutorial on accessing this data at &lt;a href=&#34;https://ropensci.org/tutorials/rnoaa_tutorial/&#34;&gt;R Open Sci&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I’ve also hear the &lt;a href=&#34;https://www.wunderground.com/pws/overview&#34;&gt;Weather Underground&lt;/a&gt; has a good API, but it looks like you need to contribute weather data with an IoT device to access it. Cool! But may not be useful to some.&lt;/p&gt;
&lt;p&gt;Are there any other sources of weather data that you know of? Do you have suggestions to improve the approach I used for the Dark Sky data?&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
